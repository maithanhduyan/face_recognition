[project]
name = "face-recognition-hybrid"
version = "0.2.0"
description = "High-performance face recognition system with Rust backend and Python frontend"
authors = [
    {name = "Face Recognition Team", email = "team@facerecognition.com"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.12"
keywords = ["face-recognition", "rust", "python", "opencv", "computer-vision", "ai", "ml"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research", 
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Rust",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Image Recognition",
    "Topic :: Multimedia :: Graphics :: Capture :: Digital Camera",
]

dependencies = [
    # Core dependencies
    "numpy>=2.3.2",
    "opencv-python>=4.11.0.86",
    "pillow>=11.3.0",
    # Optional face recognition (fallback)
    "face-recognition>=1.3.0; extra=='full'",
    "face-recognition-models; extra=='full'",
    # Scientific computing
    "matplotlib>=3.10.0",
    "scikit-learn>=1.7.0",
    "scipy>=1.16.0",
    # Utilities
    "click>=8.2.0",
    "colorama>=0.4.6",
]

[project.optional-dependencies]
# Full feature set with face_recognition library
full = [
    "face-recognition>=1.3.0",
    "face-recognition-models",
    "dlib>=20.0.0",
]

# Development dependencies
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0", 
    "pytest-benchmark>=4.0.0",
    "black>=24.0.0",
    "ruff>=0.6.0",
    "mypy>=1.11.0",
    "isort>=5.13.0",
    "pre-commit>=3.8.0",
]

# Build dependencies
build = [
    "maturin>=1.9.0",
    "wheel>=0.45.0",
    "setuptools>=80.0.0",
    "build>=1.2.0",
]

# Performance testing
perf = [
    "pytest-benchmark>=4.0.0",
    "memory-profiler>=0.61.0",
    "line-profiler>=4.1.0",
]

[project.urls]
Homepage = "https://github.com/maithanhduyan/face_recognition"
Repository = "https://github.com/maithanhduyan/face_recognition.git"
Documentation = "https://github.com/maithanhduyan/face_recognition#readme"
"Bug Tracker" = "https://github.com/maithanhduyan/face_recognition/issues"

[project.scripts]
face-recognition = "face_recognition_py.main:main"
face-recognition-hybrid = "hybrid_face_app:main"
face-recognition-opencv = "opencv_face_app:main"

# Maturin configuration for Rust extension
[build-system]
requires = ["maturin>=1.9.0,<2.0"]
build-backend = "maturin"

[tool.maturin]
features = ["pyo3/extension-module"]
python-source = "src/python"
module-name = "face_recognition_rust"
bindings = "pyo3"

# Python tooling configuration
[tool.black]
line-length = 100
target-version = ['py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | \.cargo
  | target
  | build
  | dist
)/
'''

[tool.ruff]
line-length = 100
target-version = "py312"
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"test_*.py" = ["B011"]

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 100
known_first_party = ["face_recognition_py", "face_recognition_rust"]

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "cv2.*",
    "face_recognition.*", 
    "face_recognition_models.*",
    "dlib.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "-q", 
    "--strict-markers",
    "--strict-config",
    "--cov=face_recognition_py",
    "--cov-report=term-missing",
    "--cov-report=html",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"] 
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "rust: marks tests that require Rust backend",
    "camera: marks tests that require camera access",
    "gpu: marks tests that require GPU",
]

# UV package manager configuration
[tool.uv]
dev-dependencies = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=24.0.0", 
    "ruff>=0.6.0",
    "mypy>=1.11.0",
    "maturin>=1.9.0",
]

[tool.uv.sources]
face-recognition-models = { git = "https://github.com/ageitgey/face_recognition_models" }

# Coverage configuration
[tool.coverage.run]
source = ["face_recognition_py"]
omit = [
    "*/tests/*",
    "*/test_*.py", 
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError", 
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
